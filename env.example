# Admin Dashboard Access Key
ADMIN_KEY=0502

# Google Apps Script Integration (Optional)
# Get this from your Google Apps Script Web App deployment
NEXT_PUBLIC_APPS_SCRIPT_URL=https://script.google.com/macros/s/AKfycbwGK6LLGkTUq1jCKHl5O7faZbdvGV0w5H19srok7wUxCMn0fW1gWBWgj-bygvZzMe0p/exec
# Optional: separate Google Apps Script for Rooms (chat) logs to keep them isolated from files/text logs
NEXT_PUBLIC_ROOMS_APPS_SCRIPT_URL=https://script.google.com/macros/s/AKfycbyrkFp_UP0uTQspt6Bily8ZXKUuSYWx2Cmxg0J7WLNwUXlCbPXIEvVVFIuImNKPJ-dJaQ/exec

// Put your Google Sheet ID here (the long ID in the sheet URL)
const SHEET_ID = '1ICX75eRpV7CdDuIUr_9_0O08LngAAVlBF2JnGlDDOl4';

function doPost(e) {
  try {
    if (!e || !e.postData || !e.postData.contents) {
      return respond({ ok: false, error: 'No postData' }, 400);
    }

    const data = JSON.parse(e.postData.contents || '{}');
    const action = data.action;
    const ss = SpreadsheetApp.openById(SHEET_ID);

    if (action === 'room_create') {
      const roomCode = String(data.roomCode || '').toUpperCase();
      const maxMembers = Number(data.maxMembers || 0);
      const createdAt = data.createdAt || new Date().toISOString();
      const expiresAt = data.expiresAt || '';

      const sheetName = getOrCreateRoomSheet(ss, roomCode);
      const sheet = ss.getSheetByName(sheetName);

      // TYPE, RECEIVED_AT, ROOM_CODE, SENDER_OR_EVENT, TEXT_OR_MAX, AT_OR_EXPIRES, MESSAGE_ID
      sheet.appendRow(['EVENT', new Date(), roomCode, 'room_create', maxMembers, expiresAt, '']);

      return respond({ ok: true });
    }

    if (action === 'room_message') {
      const roomCode = String(data.roomCode || '').toUpperCase();
      const senderName = data.senderName || 'Anon';
      const text = data.text || '';
      const at = data.at ? new Date(data.at) : new Date();
      const messageId = data.messageId || ''; // optional

      const sheetName = getOrCreateRoomSheet(ss, roomCode);
      const sheet = ss.getSheetByName(sheetName);

      // TYPE, RECEIVED_AT, ROOM_CODE, SENDER_OR_EVENT, TEXT_OR_MAX, AT_OR_EXPIRES, MESSAGE_ID
      sheet.appendRow(['MSG', new Date(), roomCode, senderName, text, at, messageId]);

      return respond({ ok: true });
    }

    return respond({ ok: false, error: 'Unknown action' }, 400);
  } catch (err) {
    return respond({ ok: false, error: String(err) }, 500);
  }
}

function getOrCreateRoomSheet(ss, roomCode) {
  const name = `ROOM_${roomCode}`;
  let sheet = ss.getSheetByName(name);
  if (!sheet) {
    sheet = ss.insertSheet(name);
    sheet.appendRow(['TYPE', 'RECEIVED_AT', 'ROOM_CODE', 'SENDER_OR_EVENT', 'TEXT_OR_MAX', 'AT_OR_EXPIRES', 'MESSAGE_ID']);
    sheet.setFrozenRows(1);
  }
  return name;
}

function respond(obj, status) {
  const payload = ContentService.createTextOutput(JSON.stringify(obj)).setMimeType(ContentService.MimeType.JSON);
  if (status && payload.setStatusCode) payload.setStatusCode(status);
  return payload;
}

# Supabase (for encrypted file storage)
# Create a free project at https://supabase.com and a public bucket (e.g., encrypted-files)
NEXT_PUBLIC_SUPABASE_URL=https://lfiblmfsawltlurwpdxh.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxmaWJsbWZzYXdsdGx1cndwZHhoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxNjIzNzAsImV4cCI6MjA3MDczODM3MH0.6sCZ6Fjz-kjryxDJ1khb9GTXc8FpFAt754GZC-R2H60
NEXT_PUBLIC_SUPABASE_BUCKET=encrypted-files

# Optional: Admin read-access to encrypted files without user password
# Generate an RSA 2048 keypair. Set the public key (SPKI DER) as base64 here to enable envelope encryption.
# Keep the private key offline. The app can then decrypt with user's password OR you can decrypt using the
# admin private key locally (never uploaded). If not set, the app uses password-only encryption.
NEXT_PUBLIC_ADMIN_RSA_PUBLIC_KEY_B64=
